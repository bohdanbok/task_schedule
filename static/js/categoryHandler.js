import { showNotification } from './notificationHandler.js';
import { updateCategoryDropdowns, rgbToHex, fetchAllCategories } from './utils.js';

export function setupCategoryHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoriesGrid = document.querySelector('.categories-grid');
    if (categoriesGrid) {
        let draggedCategory = null;

        categoriesGrid.addEventListener('dragstart', (e) => {
            const category = e.target.closest('.category');
            if (category) {
                draggedCategory = category;
                draggedCategory.classList.add('dragging');
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/plain', draggedCategory.id);
            }
        });

        categoriesGrid.addEventListener('dragend', (e) => {
            if (draggedCategory) {
                draggedCategory.classList.remove('dragging');
                draggedCategory = null;
            }
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã drag-over
            document.querySelectorAll('.category.drag-over').forEach(el => {
                el.classList.remove('drag-over');
            });
        });

        categoriesGrid.addEventListener('dragover', (e) => {
            e.preventDefault();
            if (!draggedCategory) return;

            const targetCategory = e.target.closest('.category');
            if (targetCategory && targetCategory !== draggedCategory) {
                const rect = targetCategory.getBoundingClientRect();
                const midY = rect.top + rect.height / 2;

                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                document.querySelectorAll('.category.drag-over').forEach(el => {
                    el.classList.remove('drag-over');
                });

                if (e.clientY < midY) {
                    targetCategory.classList.add('drag-over');
                    categoriesGrid.insertBefore(draggedCategory, targetCategory);
                } else {
                    targetCategory.classList.add('drag-over');
                    categoriesGrid.insertBefore(draggedCategory, targetCategory.nextSibling);
                }
            }
        });

        categoriesGrid.addEventListener('dragleave', (e) => {
            const category = e.target.closest('.category');
            if (category && !category.contains(e.relatedTarget)) {
                category.classList.remove('drag-over');
            }
        });

        categoriesGrid.addEventListener('drop', async (e) => {
            e.preventDefault();
            if (!draggedCategory) return;

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã drag-over
            document.querySelectorAll('.category.drag-over').forEach(el => {
                el.classList.remove('drag-over');
            });

            const newOrder = Array.from(categoriesGrid.children)
                .filter(el => el.classList.contains('category'))
                .map(cat => cat.id.split('-')[1]);

            try {
                const formData = new FormData();
                newOrder.forEach(id => formData.append('order[]', id));

                const response = await fetch('/update_category_order', {
                    method: 'POST',
                    body: formData,
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('–ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error updating category order:', error);
                showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.', 'error');
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    document.addEventListener('click', async function (e) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (e.target.closest('#create-category-btn')) {
            document.getElementById('category-popup').style.display = 'flex';
        }

        // –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (e.target.closest('#cancel-category-btn')) {
            document.getElementById('category-popup').style.display = 'none';
            document.getElementById('add-category-form').reset();
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (e.target.closest('.edit-category-color')) {
            const button = e.target.closest('.edit-category-color');
            const catId = button.dataset.catId;
            const categoryElement = document.getElementById(`category-${catId}`);
            const categoryColor = categoryElement?.querySelector('.category-header').style.backgroundColor;

            document.getElementById('edit_category_color').value = rgbToHex(categoryColor);
            document.getElementById('edit-color-popup').dataset.catId = catId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º catId –≤ –ø–æ–ø–∞–ø–µ
            document.getElementById('edit-color-popup').style.display = 'flex';
        }

        // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (e.target.closest('#cancel-edit-color-btn')) {
            document.getElementById('edit-color-popup').style.display = 'none';
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (e.target.closest('.delete-category')) {
            const button = e.target.closest('.delete-category');
            const catId = button.dataset.catId;
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∑–∞–¥–∞—á–∏?')) {
                try {
                    const response = await fetch(`/delete_category/${catId}`, {
                        method: 'POST',
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });
                    const data = await response.json();
                    if (data.success) {
                        document.getElementById(`category-${catId}`).remove();
                        // –£–¥–∞–ª—è–µ–º –æ–ø—Ü–∏—é –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
                        const categorySelects = document.querySelectorAll('select[name="category_id"], select[name="new_category_id"]');
                        categorySelects.forEach(select => {
                            const optionToRemove = select.querySelector(`option[value="${catId}"]`);
                            if (optionToRemove) optionToRemove.remove();
                        });
                        showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!', 'success');

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–∑–∞–¥–∞—á
                        if (window.updateCalendarEvents) {
                            window.updateCalendarEvents();
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                        const categories = await fetchAllCategories();
                        console.log('Categories after deletion:', categories); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        updateCategoryDropdowns(categories);

                    } else {
                        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error deleting category:', error);
                    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', 'error');
                }
            }
        }

        // –°–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (e.target.closest('.toggle-tasks')) {
            const button = e.target.closest('.toggle-tasks');
            const catId = button.dataset.catId;
            const taskContainer = document.getElementById(`task-container-${catId}`);
            if (taskContainer) {
                const isCollapsed = taskContainer.classList.toggle('collapsed');
                button.textContent = isCollapsed ? 'üîΩ' : 'üîº';
            }
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.getElementById('add-category-form')?.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        try {
            const response = await fetch('/add_category', {
                method: 'POST',
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });
            const data = await response.json();
            if (data.success) {
                const newCategory = data.category;
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                const categoriesGrid = document.querySelector('.categories-grid');
                if (categoriesGrid) {
                    const newCategoryHtml = `
                        <div class="category" id="category-${newCategory.id}" draggable="true">
                            <div class="category-header" style="background-color: ${newCategory.color};">
                                <h3>${newCategory.name}</h3>
                                <div class="button-group">
                                    <button class="edit-category-color btn-action" data-cat-id="${newCategory.id}" title="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏">üé®</button>
                                    <button class="toggle-tasks btn-action" data-cat-id="${newCategory.id}" title="–°–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á–∏">üîΩ</button>
                                    <button class="delete-category btn-action btn-action-danger" data-cat-id="${newCategory.id}" title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é">‚úï</button>
                                </div>
                            </div>
                            <div id="task-container-${newCategory.id}" class="task-container">
                                <p class="no-tasks-message">–ó–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                            </div>
                        </div>`;
                    categoriesGrid.insertAdjacentHTML('beforeend', newCategoryHtml);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                const categories = await fetchAllCategories();
                console.log('Categories after adding:', categories); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                updateCategoryDropdowns(categories);

                document.getElementById('category-popup').style.display = 'none';
                this.reset();
                showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞–º –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
                if (window.updateCalendarEvents) {
                    window.updateCalendarEvents();
                }

            } else {
                showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'), 'error');
            }
        } catch (error) {
            console.error('Error adding category:', error);
            showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', 'error');
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.getElementById('edit-color-form')?.addEventListener('submit', async function (e) {
        e.preventDefault();
        const catId = document.getElementById('edit-color-popup').dataset.catId;
        const formData = new FormData(this);
        try {
            const response = await fetch(`/edit_category_color/${catId}`, {
                method: 'POST',
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });
            const data = await response.json();
            if (data.success) {
                const categoryHeader = document.querySelector(`#category-${catId} .category-header`);
                if (categoryHeader) {
                    categoryHeader.style.backgroundColor = data.color;
                }
                document.getElementById('edit-color-popup').style.display = 'none';
                showNotification('–¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + data.message, 'error');
            }
        } catch (error) {
            console.error('Error updating category color:', error);
            showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', 'error');
        }
    });
} 