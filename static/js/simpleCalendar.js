let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let allTasks = []; // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

const monthNames = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
];

export function renderCalendar(tasks = []) {
    allTasks = tasks; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

    const daysContainer = document.getElementById('calendar-days');
    const currentMonthYearSpan = document.getElementById('currentMonthYear');
    if (!daysContainer || !currentMonthYearSpan) return;

    daysContainer.innerHTML = '';
    currentMonthYearSpan.textContent = `${monthNames[currentMonth]} ${currentYear} –≥.`;

    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–Ω–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Å–µ—Ç–∫–µ
    for (let i = 0; i < (firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1); i++) { // Adjusted for Monday start
        const emptyDay = document.createElement('div');
        emptyDay.classList.add('calendar-day', 'empty');
        daysContainer.appendChild(emptyDay);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
        const dayEl = document.createElement('div');
        dayEl.classList.add('calendar-day');
        dayEl.textContent = day;

        const today = new Date();
        if (day === today.getDate() && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
            dayEl.classList.add('current-day');
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –¥–Ω–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏
        const formattedDay = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const hasTasksForDay = allTasks.some(task => task.date === formattedDay && !task.completed);
        if (hasTasksForDay) {
            dayEl.classList.add('has-task');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–Ω—è
        dayEl.addEventListener('click', () => {
            const tasksForDay = allTasks.filter(task => task.date === formattedDay);
            if (tasksForDay.length > 0) {
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–µ —ç—Ç–æ–≥–æ –¥–Ω—è
                const firstTaskElement = document.querySelector(`[data-task-deadline="${formattedDay}"]`);
                if (firstTaskElement) {
                    firstTaskElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }
        });

        daysContainer.appendChild(dayEl);
    }
}

export function setupCalendarNavigation() {
    document.getElementById('prevMonth')?.addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderCalendar();
    });

    document.getElementById('nextMonth')?.addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderCalendar();
    });
}

export function setupCalendarToggle() {
    const calendarToggle = document.querySelector('.calendar-toggle');
    const calendarWrapper = document.querySelector('.calendar-wrapper');
    const toggleIcon = calendarToggle?.querySelector('.toggle-icon');

    if (calendarToggle && calendarWrapper && toggleIcon) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏–∫–æ–Ω–∫—É
        const isInitiallyCollapsed = calendarWrapper.classList.contains('calendar-collapsed');
        toggleIcon.textContent = isInitiallyCollapsed ? 'üîº' : 'üîΩ';

        calendarToggle.addEventListener('click', function () {
            const isCollapsed = calendarWrapper.classList.toggle('calendar-collapsed');
            toggleIcon.textContent = isCollapsed ? 'üîº' : 'üîΩ';
        });
    }
}

export function initializeSimpleCalendar(tasks = []) {
    renderCalendar(tasks);
    setupCalendarNavigation();
    setupCalendarToggle();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑–≤–Ω–µ
export function updateCalendarWithTasks(tasks) {
    renderCalendar(tasks);
} 