import { setupTaskHandlers } from './taskHandler.js';
import { setupCategoryHandlers } from './categoryHandler.js';
import { initializeSimpleCalendar } from './simpleCalendar.js';
import { updateCategoryDropdowns, fetchAllCategories } from './utils.js';
import { showNotification } from './notificationHandler.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
async function fetchWeather() {
    const apiKey = '201c10556284c82018baf0c97e225d88';
    const city = 'Miami';
    const lang = 'ru';
    const units = 'metric'; // –¶–µ–ª—å—Å–∏–π
    const weatherWidget = document.getElementById('weather-widget');

    if (!weatherWidget) {
        console.error('Weather widget element not found.');
        return;
    }

    try {
        // –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        const currentResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=${units}&lang=${lang}`);
        if (!currentResponse.ok) {
            throw new Error(`HTTP error! status: ${currentResponse.status} for current weather`);
        }
        const currentData = await currentResponse.json();

        const currentTemperature = Math.round(currentData.main.temp);
        const currentDescription = currentData.weather[0].description;
        const currentIconCode = currentData.weather[0].icon;
        const currentIconUrl = `http://openweathermap.org/img/wn/${currentIconCode}.png`; // –ò–∫–æ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã

        let weatherHtml = `
            <div class="current-weather">
                <p>${currentData.name}: ${currentTemperature}¬∞C, ${currentDescription}
                <img src="${currentIconUrl}" alt="${currentDescription}"></p>
            </div>
            <div class="forecast-container">
        `;

        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π / 3 —á–∞—Å–∞
        const forecastResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${units}&lang=${lang}`);
        if (!forecastResponse.ok) {
            throw new Error(`HTTP error! status: ${forecastResponse.status} for forecast`);
        }
        const forecastData = await forecastResponse.json();

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤ (4 –∑–∞–ø–∏—Å–∏, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª 3 —á–∞—Å–∞)
        for (let i = 0; i < 4; i++) {
            const forecastItem = forecastData.list[i];
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UTC –≤—Ä–µ–º—è –≤ EST
            const forecastDate = new Date(forecastItem.dt * 1000);
            const forecastTime = forecastDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'America/New_York' });
            const forecastTemperature = Math.round(forecastItem.main.temp);
            const forecastDescription = forecastItem.weather[0].description;
            const forecastIconCode = forecastItem.weather[0].icon;
            const forecastIconUrl = `http://openweathermap.org/img/wn/${forecastIconCode}.png`;

            weatherHtml += `
                <div class="forecast-item">
                    <p>${forecastTime}</p>
                    <img src="${forecastIconUrl}" alt="${forecastDescription}">
                    <p>${forecastTemperature}¬∞C</p>
                    <p>${forecastDescription}</p>
                </div>
            `;
        }

        weatherHtml += `</div>`;
        weatherWidget.innerHTML = weatherHtml;

    } catch (error) {
        console.error('Error fetching weather data:', error);
        weatherWidget.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.</p>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
async function fetchAllTasks() {
    try {
        const response = await fetch('/get_all_tasks');
        const data = await response.json();
        if (data.success) {
            return data.tasks.map(task => ({
                ...task,
                date: task.deadline // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deadline –≤ date –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            }));
        }
        return [];
    } catch (error) {
        console.error('Error fetching tasks:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫
async function fetchTravelTimes() {
    const homeAddress = '650 NE 2nd Ave, Miami';
    const workAddress = '8880 NW 20th St N, Doral';
    const apiKey = 'AIzaSyDZIk3uFh47iHkQMI1CpSFgKQ88GT0KUXQ'; // –í–∞—à –∫–ª—é—á Google Maps API

    const homeToWorkElement = document.getElementById('home-to-work');
    const workToHomeElement = document.getElementById('work-to-home');

    if (!homeToWorkElement || !workToHomeElement) {
        console.error('Travel time widget elements not found.');
        return;
    }

    try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Google Maps API –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–µ—Ä–≤–∏—Å—ã
        if (typeof google === 'undefined' || typeof google.maps === 'undefined' || typeof google.maps.DistanceMatrixService === 'undefined') {
            console.warn('Google Maps API or Distance Matrix Service not yet loaded. Retrying in 1 second...');
            setTimeout(fetchTravelTimes, 1000); // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            return;
        }

        const service = new google.maps.DistanceMatrixService();

        // –î–æ–º -> –†–∞–±–æ—Ç–∞
        service.getDistanceMatrix(
            {
                origins: [homeAddress],
                destinations: [workAddress],
                travelMode: google.maps.TravelMode.DRIVING,
                drivingOptions: {
                    departureTime: new Date(Date.now() + 1000), // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —Å–µ–∫—É–Ω–¥–∞
                    trafficModel: 'bestguess',
                },
                unitSystem: google.maps.UnitSystem.METRIC, // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            },
            (response, status) => {
                if (status === 'OK' && response.rows[0].elements[0].status === 'OK') {
                    const durationInTraffic = response.rows[0].elements[0].duration_in_traffic.text;
                    homeToWorkElement.textContent = `üè† ‚Üí üè¢: ${durationInTraffic}`;
                } else {
                    homeToWorkElement.textContent = `üè† ‚Üí üè¢: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`;
                    console.error('Error fetching home to work travel time:', status, response);
                }
            }
        );

        // –†–∞–±–æ—Ç–∞ -> –î–æ–º
        service.getDistanceMatrix(
            {
                origins: [workAddress],
                destinations: [homeAddress],
                travelMode: google.maps.TravelMode.DRIVING,
                drivingOptions: {
                    departureTime: new Date(Date.now() + 1000), // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —Å–µ–∫—É–Ω–¥–∞
                    trafficModel: 'bestguess',
                },
                unitSystem: google.maps.UnitSystem.METRIC,
            },
            (response, status) => {
                if (status === 'OK' && response.rows[0].elements[0].status === 'OK') {
                    const durationInTraffic = response.rows[0].elements[0].duration_in_traffic.text;
                    workToHomeElement.textContent = `üè¢ ‚Üí üè†: ${durationInTraffic}`;
                } else {
                    workToHomeElement.textContent = `üè¢ ‚Üí üè†: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`;
                    console.error('Error fetching work to home travel time:', status, response);
                }
            }
        );

    } catch (error) {
        console.error('Error initializing travel time fetching:', error);
        homeToWorkElement.textContent = `üè† ‚Üí üè¢: –û—à–∏–±–∫–∞`;
        workToHomeElement.textContent = `üè¢ ‚Üí üè†: –û—à–∏–±–∫–∞`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupTaskHandlers();
    setupCategoryHandlers();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∑–∞–¥–∞—á–∞–º–∏
    const tasks = await fetchAllTasks();
    initializeSimpleCalendar(tasks);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categories = await fetchAllCategories();
    updateCategoryDropdowns(categories);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    fetchWeather();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
    fetchTravelTimes();

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateCalendarEvents –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.updateCalendarEvents = async () => {
        const tasks = await fetchAllTasks();
        initializeSimpleCalendar(tasks);
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flatpickr –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    flatpickr(".deadline-input", {
        dateFormat: "d.m.Y",
        locale: "ru",
        allowInput: true,
        time_24hr: true
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    const changePasswordPopup = document.getElementById('change-password-popup');
    const settingsBtn = document.getElementById('settings-btn');
    const cancelChangePasswordBtn = document.getElementById('cancel-change-password-btn');
    const changePasswordForm = document.getElementById('change-password-form');

    if (settingsBtn) {
        settingsBtn.addEventListener('click', () => {
            if (changePasswordPopup) {
                changePasswordPopup.style.display = 'flex';
            }
        });
    }

    if (cancelChangePasswordBtn) {
        cancelChangePasswordBtn.addEventListener('click', () => {
            if (changePasswordPopup) {
                changePasswordPopup.style.display = 'none';
                if (changePasswordForm) changePasswordForm.reset();
            }
        });
    }

    if (changePasswordForm) {
        changePasswordForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(changePasswordForm);
            const currentPassword = formData.get('current_password');
            const newPassword = formData.get('new_password');
            const confirmNewPassword = formData.get('confirm_new_password');

            if (newPassword !== confirmNewPassword) {
                showNotification('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.', 'error');
                return;
            }

            try {
                const response = await fetch('/change_password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        current_password: currentPassword,
                        new_password: newPassword
                    })
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success');
                    if (changePasswordPopup) changePasswordPopup.style.display = 'none';
                    if (changePasswordForm) changePasswordForm.reset();
                } else {
                    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error changing password:', error);
                showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è.', 'error');
            }
        });
    }
}); 